<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="AdminVerifyThatCustomersMatchesToASegmentWithConditionsOrderAddressTest">
        <annotations>
            <features value="CustomerSegment"/>
            <stories value="Customer segment with ordered address based condition"/>
            <title value="Customer segment with order based condition should automatically match customer after order is placed"/>
            <description value="Customer segment with address based condition should automatically match customer after order is placed and also verify the customer for wrong postal code"/>
            <severity value="MAJOR"/>
            <testCaseId value="AC-3857"/>
        </annotations>
        <before>
            <!-- Create product -->
            <createData entity="SimpleProduct" after="createCustomer" stepKey="createSimpleProduct"/>
            <!-- Login to backend -->
            <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>
            <actionGroup ref="CliIndexerReindexActionGroup" stepKey="reindex">
                <argument name="indices" value=""/>
            </actionGroup>
            <actionGroup ref="CliCacheCleanActionGroup" stepKey="cleanCache">
                <argument name="tags" value="config full_page"/>
            </actionGroup>
        </before>
        <after>
            <!-- Delete product -->
            <deleteData createDataKey="createSimpleProduct" after="deleteCustomer" stepKey="deleteProduct"/>
            <!-- Delete customer segment -->
            <actionGroup ref="FindAndDeleteCustomerSegmentActionGroup" stepKey="deleteSegment">
                <argument name="segmentName" value="{{CustomerSegmentForRegistered.name}}"/>
            </actionGroup>
            <actionGroup ref="CliIndexerReindexActionGroup" stepKey="reindex">
                <argument name="indices" value=""/>
            </actionGroup>
            <!-- Logout from backend -->
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logout"/>
        </after>

        <!-- Login to storefront as customer -->
        <actionGroup ref="LoginToStorefrontActionGroup" stepKey="customerLogin">
            <argument name="Customer" value="$createCustomer$"/>
        </actionGroup>
        <!-- Open product on storefront -->
        <actionGroup ref="StorefrontOpenProductEntityPageActionGroup" stepKey="openProductPage">
            <argument name="product" value="$createSimpleProduct$"/>
        </actionGroup>
        <!-- Add product to shopping cart -->
        <actionGroup ref="StorefrontAddProductToCartActionGroup" stepKey="addProductToCart">
            <argument name="product" value="$createSimpleProduct$"/>
            <argument name="productCount" value="1"/>
        </actionGroup>
        <!-- Open shopping cart -->
        <actionGroup ref="StorefrontOpenCheckoutPageActionGroup" stepKey="goBackToCheckout"/>
        <actionGroup ref="CheckoutSelectFlatRateShippingMethodActionGroup" stepKey="selectFlatShippingMethod"/>
        <actionGroup ref="StorefrontCheckoutClickNextButtonActionGroup" stepKey="clickNext"/>
        <actionGroup ref="CheckoutSelectCheckMoneyOrderPaymentActionGroup" stepKey="selectCheckMoneyPayment"/>
        <actionGroup ref="ClickPlaceOrderActionGroup" stepKey="clickPlaceOrder"/>
        <!-- Create customer segment -->
        <actionGroup ref="CreateCustomerSegmentWithContinueEditActionGroup" stepKey="createCustomerSegment">
            <argument name="customerSegment" value="CustomerSegmentForRegistered"/>
        </actionGroup>
        <!-- Fill all fields according to dataset -->
        <waitForElementClickable selector="{{AdminCustomerSegmentEditSection.conditionsTab}}" stepKey="waitForConditionTabToBeClicked"/>
        <click selector="{{AdminCustomerSegmentEditSection.conditionsTab}}" stepKey="proceedToConditionsTab"/>
        <waitForLoadingMaskToDisappear stepKey="waitForLoadingMaskToDisappear"/>
        <click selector="{{AdminCustomerSegmentConditionsEditSection.addCondition}}" stepKey="clickToAddCondition"/>

        <!-- Add condition {Customer Address|ANY:[City|is|Culver City]} -->
        <selectOption userInput="Customer Address" selector="{{AdminCustomerSegmentConditionsEditSection.conditions}}" stepKey="selectCondition"/>
        <waitForPageLoad stepKey="waitForConditionsToAppear"/>
        <click selector="{{AdminCustomerSegmentConditionsEditSection.conditionValueChooserParam('1','ALL')}}" stepKey="openSelectorAll"/>
        <selectOption userInput="ALL" selector="{{AdminCustomerSegmentConditionsEditSection.conditionTypeValue}}" stepKey="selectANY"/>
        <actionGroup ref="FillAddressConditionWithIsInCustomerSegmentActionGroup" stepKey="1stCondition">
            <argument name="index" value="1"/>
            <argument name="conditionDegree" value="1--1--1"/>
            <argument name="attribute" value="City"/>
            <argument name="valueCondition" value="Brisbane"/>
        </actionGroup>

        <actionGroup ref="SelectAddressConditionWithIsInCustomerSegmentActionGroup" stepKey="6thCondition">
            <argument name="index" value="2"/>
            <argument name="conditionDegree" value="1--1--2"/>
            <argument name="attribute" value="State/Province"/>
            <argument name="valueCondition" value="{{US_Address_Bris.state}}"/>
        </actionGroup>

        <actionGroup ref="SelectAddressConditionWithIsInCustomerSegmentActionGroup" stepKey="3rdCondition">
            <argument name="index" value="3"/>
            <argument name="conditionDegree" value="1--1--3"/>
            <argument name="attribute" value="Country"/>
            <argument name="valueCondition" value="United States"/>
        </actionGroup>

        <actionGroup ref="FillAddressConditionWithIsInCustomerSegmentActionGroup" stepKey="9thCondition">
            <argument name="index" value="4"/>
            <argument name="conditionDegree" value="1--1--4"/>
            <argument name="attribute" value="Zip/Postal"/>
            <argument name="valueCondition" value="{{US_Address_Bris.postcode}}"/>
        </actionGroup>

        <waitForElementClickable selector="{{AdminMainActionsSection.saveAndContinue}}" stepKey="waitForSaveSegmentButtonToBeClicked"/>
        <click selector="{{AdminMainActionsSection.saveAndContinue}}" stepKey="saveSegment"/>
        <waitForText userInput="You saved the segment." selector="{{AdminMessagesSection.success}}" stepKey="checkSuccessMessage"/>
        <!-- Start consumer message queue and refresh the page-->
        <actionGroup ref="CliConsumerStartActionGroup" stepKey="startMessageQueue">
            <argument name="consumerName" value="{{AdminCustomerSegmentConsumerData.consumerName}}"/>
            <argument name="maxMessages" value="{{AdminCustomerSegmentConsumerData.messageLimit}}"/>
        </actionGroup>
        <reloadPage stepKey="refreshPage"/>
        <waitForPageLoad stepKey="waitForPageLoaded"/>
        <!--Open customer segment and check customer-->
        <actionGroup ref="AdminCheckCustomerInSegmentActionGroup" stepKey="checkCustomerInSegment">
            <argument name="customer" value="$createCustomer$"/>
        </actionGroup>
        <!--Open condition tab and change pincode and save-->
        <waitForElementClickable selector="{{AdminCustomerSegmentEditSection.conditionsTab}}" stepKey="waitForConditionTabToBeClickedAfterAssertingCustomer"/>
        <click selector="{{AdminCustomerSegmentEditSection.conditionsTab}}" stepKey="clickOnConditionsTabAgainToUpdatePostalCode"/>
        <waitForLoadingMaskToDisappear stepKey="waitForLoadingMaskToDisappearToUpdatePostalCode"/>
        <click selector="{{AdminCustomerSegmentConditionsEditSection.removeConditionValueChooserParam('1--1','94005')}}" stepKey="doubleClickOnQtyInput"/>
        <actionGroup ref="FillAddressConditionWithIsInCustomerSegmentActionGroup" stepKey="updateZipCode">
            <argument name="index" value="4"/>
            <argument name="conditionDegree" value="1--1--4"/>
            <argument name="attribute" value="Zip/Postal"/>
            <argument name="valueCondition" value="34785"/>
        </actionGroup>
        <waitForElementClickable selector="{{AdminMainActionsSection.saveAndContinue}}" stepKey="waitForSaveSegmentButtonToBeClickedAfterUpdatingZipCode"/>
        <click selector="{{AdminMainActionsSection.saveAndContinue}}" stepKey="saveSegmentAfterChangingZipCode"/>
        <waitForText userInput="You saved the segment." selector="{{AdminMessagesSection.success}}" stepKey="checkSuccessMessageAfterChangingZipCode"/>
        <!-- Start consumer message queue and refresh the page-->
        <actionGroup ref="CliConsumerStartActionGroup" stepKey="startMessageQueueAfterChangingPinCode">
            <argument name="consumerName" value="{{AdminCustomerSegmentConsumerData.consumerName}}"/>
            <argument name="maxMessages" value="{{AdminCustomerSegmentConsumerData.messageLimit}}"/>
        </actionGroup>
        <reloadPage stepKey="refreshPageAfterChangingZipCode"/>
        <waitForPageLoad stepKey="waitForPageLoadedAfterChangingZipCode"/>
        <!--Assert the customer is not present in segment-->
        <actionGroup ref="AdminCheckCustomerNotMatchedSegmentActionGroup" stepKey="checkCustomerNotInSegment">
            <argument name="customer" value="$createCustomer$"/>
        </actionGroup>
    </test>
</tests>
