<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->
<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="RegisteredPaypalCheckoutWithFlatRatePaymentActionSaleTest">
        <annotations>
            <features value="PayPal"/>
            <stories value="Registered Checkout Using PayPal Smart Button and Flat Rate (Payment Action = Sale)"/>
            <title value="Registered Checkout Using PayPal Smart Button and Flat Rate (Payment Action = Sale)"/>
            <description value="Customer buy Gift Card Product and checkout using paypal express with flat rates and payment action is sale"/>
            <severity value="CRITICAL"/>
            <testCaseId value="AC-5037"/>
            <group value="3rd_party_integration"/>
            <!-- <group value="pr_exclude"/>-->
        </annotations>
        <before>
            <actionGroup ref="AdminLoginActionGroup" stepKey="login"/>
            <!-- Enable Flat rate -->
            <magentoCLI command="config:set {{EnableFlatRateConfigData.path}} {{EnableFlatRateConfigData.value}}" stepKey="enableFlatRate"/>
            <!-- Create Category -->
            <createData entity="SimpleSubCategory" stepKey="createCategory"/>
            <!-- Enabling PayPal Express Checkout -->
            <magentoCLI command="config:set {{StorefrontPaypalExpressSalePaymentActionOptionConfigData.path}} {{StorefrontPaypalExpressSalePaymentActionOptionConfigData.value}}" stepKey="setPaymentActionSale"/>
            <actionGroup ref="AdminPayPalExpressCheckoutEnableActionGroup" stepKey="configPayPalExpress">
                <argument name="credentials" value="SamplePaypalExpressConfig2"/>
            </actionGroup>
            <!-- New Customer -->
            <createData entity="Simple_US_Customer" stepKey="createCustomer">
                <field key="firstname">John1</field>
                <field key="lastname">Doe1</field>
            </createData>
        </before>
        <after>
            <actionGroup ref="DeleteProductBySkuActionGroup" stepKey="deleteProduct">
                <argument name="sku" value="{{GiftCard.sku}}"/>
            </actionGroup>
            <magentoCLI command="config:set paypal/general/merchant_country US" stepKey="setMerchantCountry"/>
            <magentoCLI command="config:set payment/paypal_express/active 0" stepKey="disablePayPalExpress"/>
            <actionGroup ref="StorefrontCustomerLogoutActionGroup" stepKey="logoutCustomer" />
            <deleteData createDataKey="createCustomer" stepKey="deleteCustomer"/>
            <!-- Delete Product -->
            <deleteData stepKey="deleteCategory" createDataKey="createCategory"/>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logout"/>
        </after>
        <!-- Create gift card product -->
        <amOnPage url="{{AdminProductIndexPage.url}}" stepKey="navigateToCatalogProductGrid"/>
        <waitForPageLoad stepKey="waitForCatalogProductGrid"/>
        <actionGroup ref="GoToSpecifiedCreateProductPageActionGroup" stepKey="openProductFillForm">
            <argument name="productType" value="giftcard"/>
        </actionGroup>
        <!-- Fill gift card product values -->
        <actionGroup ref="AdminFillGiftCardProductFieldsActionGroup" stepKey="fillGiftCardProductFields">
            <argument name="product" value="GiftCard"/>
        </actionGroup>
        <!-- Add amount to gift card product -->
        <actionGroup ref="addGiftCardAmount" stepKey="addAmountToGiftCard">
            <argument name="giftCardAmount" value="GiftCard.amounts[0]"/>
        </actionGroup>
        <!-- Add gift card product to category -->
        <searchAndMultiSelectOption selector="{{AdminProductFormSection.categoriesDropdown}}" parameterArray="[$$createCategory.name$$]" stepKey="fillCategory" after="addAmountToGiftCard"/>
        <!-- Save gift card product -->
        <actionGroup ref="SaveProductFormActionGroup" stepKey="saveProduct"/>
        <actionGroup ref="LoginToStorefrontActionGroup" stepKey="signUpNewUser">
            <argument name="Customer" value="$$createCustomer$$"/>
        </actionGroup>
        <!-- Quick search gift card product -->
        <actionGroup ref="StorefrontCheckQuickSearchActionGroup" stepKey="quickSearchForGiftCardProduct">
            <argument name="phrase" value="GiftCard.sku"/>
        </actionGroup>
        <!-- Go to gift card product page on storefront -->
        <seeElement selector="{{StorefrontCategoryMainSection.productLink}}" stepKey="seeProductsInCategory"/>
        <waitForElementClickable selector="{{StorefrontCategoryMainSection.productLink}}" stepKey="waitForProductClickable"/>
        <click selector="{{StorefrontCategoryMainSection.productLink}}" stepKey="openProduct"/>
        <!-- Enter Sender's and recipient name  -->
        <actionGroup ref="StorefrontFillGiftCardPhysicalProductFormActionGroup" stepKey="addDetailsOfGiftCard"/>
        <!-- Add product to cart-->
        <actionGroup ref="StorefrontClickAddToCartOnProductPageActionGroup" stepKey="addToCartFromStorefrontProductPage"/>
        <!-- Open mini cart from product page and proceed to checkout -->
        <actionGroup ref="GoToCheckoutFromMinicartActionGroup" stepKey="goToCheckoutFromMinicart"/>
        <!-- Verify Shipping address-->
        <grabTextFrom selector="{{CheckoutShippingSection.savedAddress}}"  stepKey="grabAddress"/>
        <!-- Assert the value of created customer attribute in shipping address block of checkout page-->
        <assertStringContainsString stepKey="assertCustomerAddresAttribute">
            <actualResult type="variable">$grabAddress</actualResult>
            <expectedResult type="string">{{US_Address_TX.street[0]}}</expectedResult>
        </assertStringContainsString>
        <!-- Select Flat rate and click Next-->
        <actionGroup ref="CheckoutSelectFlatRateShippingMethodActionGroup" stepKey="selectFlatRate"/>
        <actionGroup ref="StorefrontCheckoutClickNextOnShippingStepActionGroup" stepKey="clickNextOnShippingStep"/>
        <!--Assert grand total-->
        <actionGroup ref="VerifyCheckoutPaymentOrderSummaryActionGroup" stepKey="verifyCheckoutPaymentOrderSummary">
            <argument name="orderSummarySubTotal" value="$10.00"/>
            <argument name="orderSummaryShippingTotal" value="$5.00"/>
            <argument name="orderSummaryTotal" value="$15.00"/>
        </actionGroup>
        <!-- Click on PayPal payment radio button -->
        <waitForElementClickable selector="{{CheckoutPaymentSection.PayPalPaymentRadio}}" stepKey="waitForPayPalRadioButton"/>
        <click selector="{{CheckoutPaymentSection.PayPalPaymentRadio}}" stepKey="selectPaypalPayment"/>
        <actionGroup ref="SwitchToPayPalGroupBtnActionGroup" stepKey="clickPayPalBtn"/>
        <!-- Login to Paypal in-context and verify order total on paypal page-->
        <actionGroup ref="StorefrontLoginToPayPalPaymentAccountTwoStepActionGroup" stepKey="loginToPayPal"/>
        <actionGroup ref="StorefrontPaypalSwitchBackToMagentoFromCheckoutPageActionGroup" stepKey="confirmPaymentAndGoBackToMagento"/>
        <waitForPageLoad stepKey="waitForPagePlacingOrderSuccessfully" />
        <!--See success messages-->
        <waitForElementVisible selector="{{CheckoutSuccessMainSection.successTitle}}" stepKey="waitForSuccessTitle"/>
        <see selector="{{CheckoutSuccessMainSection.successTitle}}" userInput="Thank you for your purchase!" stepKey="seeSuccessTitle"/>
        <see selector="{{CheckoutSuccessMainSection.orderNumberText}}" userInput="Your order number is: " stepKey="seeOrderNumber"/>
        <waitForElementVisible selector="{{CheckoutSuccessMainSection.orderNumber22}}" stepKey="waitForOrderNumberToBeGrabbed"/>
        <grabTextFrom selector="{{CheckoutSuccessMainSection.orderNumber22}}" stepKey="grabOrderNumber"/>
        <!-- Go to order page -->
        <actionGroup ref="OpenOrderByIdActionGroup" stepKey="openFirstOrderPage">
            <argument name="orderId" value="{$grabOrderNumber}"/>
        </actionGroup>
        <!-- Check order status -->
        <actionGroup ref="AdminOrderViewCheckStatusActionGroup" stepKey="seeAdminOrderStatus">
            <argument name="status" value="Processing"/>
        </actionGroup>
        <waitForElementVisible selector="{{AdminOrderDetailsInformationSection.paymentInformationField('Last Transaction ID')}}" stepKey="waitForLastTransactionIDFieldToBeAppearedAfterSubmittingInvoice"/>
        <grabTextFrom selector="{{AdminOrderDetailsInformationSection.paymentInformationField('Last Transaction ID')}}" stepKey="grabLastTransactionIDForCaptured"/>
        <!-- Check grand total -->
        <waitForText selector="{{AdminOrderTotalSection.grandTotal}}" userInput="$15.00" stepKey="checkGrandTotal"/>
        <!-- Check comment history -->
        <actionGroup ref="AdminOpenOrderCommentsHistoryActionGroup" stepKey="clickOnCommentsHistory"/>
        <waitForText selector="{{AdminOrderCommentsTabSection.orderCommentsWithType('Captured amount')}}" userInput="Captured amount of $15.00 online. Transaction ID: &quot;{$grabLastTransactionIDForCaptured}&quot;" stepKey="seeOrderHistoryNotes"/>
        <!-- Go to invoice tab and verify invoice is present-->
        <actionGroup ref="AdminOpenInvoiceTabFromOrderPageActionGroup" stepKey="clickInvoicesTabOrdersPage"/>
        <waitForElementVisible selector="{{AdminOrderInvoicesTabSection.viewInvoice}}" stepKey="waitForInvoicesTabOpenedOne"/>
        <seeElement selector="{{AdminOrderInvoicesTabSection.viewInvoice}}" stepKey="seeForInvoicesTabOpenedOne"/>
    </test>
</tests>
