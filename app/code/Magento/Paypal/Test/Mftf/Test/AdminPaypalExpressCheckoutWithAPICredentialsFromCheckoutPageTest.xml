<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->
<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="AdminPaypalExpressCheckoutWithAPICredentialsFromCheckoutPageTest">
        <annotations>
            <features value="PayPal"/>
            <stories value="Payment methods"/>
            <title value="Enable Paypal Express Checkout with API credentials and validate Paypal Express checkout working from Checkout Page."/>
            <description value="Enable Paypal Express Checkout with API credentials and validate Paypal Express checkout working from Checkout Page."/>
            <severity value="MAJOR"/>
            <testCaseId value="AC-5206"/>
            <group value="3rd_party_integration"/>
            <!--            <group value="paypalExpress"/>-->
            <!--            <group value="pr_exclude"/>-->
        </annotations>
        <before>
            <createData entity="SimpleProduct" stepKey="simpleProduct"/>
            <createData entity="Simple_US_Customer" stepKey="createCustomer"/>
            <magentoCLI command="config:set {{StorefrontPaypalExpressOrderPaymentActionOptionConfigData.path}} {{StorefrontPaypalExpressOrderPaymentActionOptionConfigData.value}}" stepKey="setPaymentActionOrder"/>
            <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>
            <!--Add new tax rates. Go to tax rule page -->
            <actionGroup ref="AddNewTaxRuleActionGroup" stepKey="addFirstTaxRuleActionGroup"/>
            <fillField stepKey="fillRuleName" selector="{{AdminTaxRulesSection.ruleName}}" userInput="{{TaxRule.name}}"/>
            <!-- Adding product rate tax for NY -->
            <actionGroup ref="AddNewTaxRateNoZipUIActionGroup" stepKey="addProductTaxRateForCA">
                <argument name="taxCode" value="SimpleTaxTexas"/>
            </actionGroup>
            <!-- Save Tax Rule -->
            <actionGroup ref="ClickSaveButtonActionGroup" stepKey="saveAnotherTaxRule">
                <argument name="message" value="You saved the tax rule."/>
            </actionGroup>
            <!-- Enable flat rate method -->
            <magentoCLI command="config:set {{EnableFlatRateConfigData.path}} {{EnableFlatRateConfigData.value}}" stepKey="enableFlatRate"/>
            <actionGroup ref="AdminPayPalExpressCheckoutEnableActionGroup" stepKey="ConfigPayPalExpress">
                <argument name="credentials" value="SamplePaypalExpressConfig2"/>
            </actionGroup>
        </before>
        <after>
            <!-- Disable flat rate method -->
            <magentoCLI command="config:set {{DisableFlatRateConfigData.path}} {{DisableFlatRateConfigData.value}}" stepKey="disableFlatRate"/>
            <magentoCLI command="config:set payment/paypal_express/active 0" stepKey="disablePayPalExpress"/>
            <deleteData createDataKey="simpleProduct" stepKey="deleteProduct"/>
            <deleteData createDataKey="createCustomer" stepKey="deleteCustomer"/>
            <!-- Go to the tax rule page and delete the row created-->
            <actionGroup ref="AdminTaxRuleGridOpenPageActionGroup" stepKey="goToTaxRulesPageA"/>
            <actionGroup ref="deleteEntitySecondaryGrid" stepKey="deleteRule">
                <argument name="name" value="{{TaxRule.name}}"/>
                <argument name="searchInput" value="{{AdminSecondaryGridSection.taxIdentifierSearch}}"/>
            </actionGroup>
            <!-- Deleting Tax zones and rate for Product Tax -->
            <actionGroup ref="AdminNavigateMenuActionGroup" stepKey="navigateToStoresTaxZonesAndRatesPage">
                <argument name="menuUiId" value="{{AdminMenuStores.dataUiId}}"/>
                <argument name="submenuUiId" value="{{AdminMenuStoresTaxZonesAndRates.dataUiId}}"/>
            </actionGroup>
            <actionGroup ref="deleteEntitySecondaryGrid" stepKey="deleteProductTaxRule1">
                <!--            <argument name="name" value="{{SimpleTaxCA.identifier}}-{{SimpleTaxCA.rate}}"/>-->
                <argument name="name" value="{{SimpleTaxTexas.identifier}}-{{SimpleTaxTexas.rate}}"/>
                <argument name="searchInput" value="{{AdminSecondaryGridSection.taxIdentifierSearch}}"/>
            </actionGroup>
            <actionGroup ref="AdminOrdersPageOpenActionGroup" stepKey="navigateToSalesOrderPage"/>
            <actionGroup ref="AdminClearFiltersActionGroup" stepKey="clickOnButtonToRemoveFiltersIfPresent"/>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logout"/>
        </after>

        <actionGroup ref="CliIndexerReindexActionGroup" stepKey="reindex">
            <argument name="indices" value=""/>
        </actionGroup>
        <actionGroup ref="CliCacheCleanActionGroup" stepKey="cleanCache">
            <argument name="tags" value="config full_page"/>
        </actionGroup>

        <!--Go to storefront and add product to cart -->
        <actionGroup ref="LoginToStorefrontActionGroup" stepKey="customerLogin">
            <argument name="Customer" value="$createCustomer$" />
        </actionGroup>
        <actionGroup ref="StorefrontOpenProductEntityPageActionGroup" stepKey="goToProductOnStorefront">
            <argument name="product" value="$$simpleProduct$$"/>
        </actionGroup>
        <actionGroup ref="AddToCartFromStorefrontProductPageActionGroup" stepKey="addTheProductToCart">
            <argument name="productName" value="$simpleProduct.name$"/>
        </actionGroup>
        <actionGroup ref="OpenStoreFrontCheckoutShippingPageActionGroup" stepKey="goToCheckoutPage"/>
        <actionGroup ref="StorefrontSetShippingMethodActionGroup" stepKey="selectFlatRate">
            <argument name="shippingMethodName" value="Flat Rate"/>
        </actionGroup>
        <!-- Go to Order review -->
        <actionGroup ref="StorefrontCheckoutClickNextOnShippingStepActionGroup" stepKey="goToCheckoutPaymentPage"/>
        <waitForElement selector="{{StorefrontCheckoutPaymentMethodSection.checkPaymentMethodByName('PayPal Express Checkout')}}" stepKey="waitForPayPalExpressCheckoutIsPresent"/>
        <click selector="{{StorefrontCheckoutPaymentMethodSection.checkPaymentMethodByName('PayPal Express Checkout')}}" stepKey="clickPayPalExpressCheckout"/>
        <waitForPageLoad stepKey="waitForPaypalExpressCheckoutToBeLoaded"/>
        <!-- Click on Paypal paypal button-->
        <actionGroup ref="SwitchToPayPalGroupBtnActionGroup" stepKey="clickPayPalBtn"/>
        <!--Login to Paypal in-context-->
        <actionGroup ref="StorefrontLoginToPayPalPaymentAccountTwoStepActionGroup" stepKey="LoginToPayPal"/>
        <!--Transfer Cart Line and Shipping Method assertion-->
        <actionGroup ref="PayPalAssertTransferLineAndShippingMethodNotExistActionGroup" stepKey="assertPayPalSettings"/>
        <!--Click PayPal button and go back to Magento site-->
        <actionGroup ref="StorefrontPaypalSwitchBackToMagentoFromCheckoutPageActionGroup" stepKey="goBackToMagentoSite"/>
        <!--        <waitForElementVisible selector="{{CheckoutSuccessMainSection.orderNumber}}" stepKey="waitForOrderNumberToBeGrabbed"/>-->
        <!--        <grabTextFrom selector="{{CheckoutSuccessMainSection.orderNumber}}" stepKey="grabOrderNumber"/>-->
        <!--        <waitForText selector="{{CheckoutSuccessMainSection.success}}" userInput="We'll email you an order confirmation with details and tracking info." stepKey="seeSuccessMessage"/>-->
        <!--        &lt;!&ndash; Go to order page &ndash;&gt;-->
        <!--        <actionGroup ref="OpenOrderByIdActionGroup" stepKey="openFirstOrderPage">-->
        <!--            <argument name="orderId" value="{$grabOrderNumber}"/>-->
        <!--        </actionGroup>-->
        <!-- See order successful Page instead of Order Review Page -->
        <waitForElement selector="{{CheckoutSuccessMainSection.successTitle}}" stepKey="waitForLoadSuccessPageTitle"/>
        <waitForElement selector="{{CheckoutSuccessMainSection.success}}" stepKey="waitForLoadSuccessPage"/>
        <!--Grab order number-->
        <waitForElementVisible selector="{{CheckoutSuccessMainSection.orderLink}}" stepKey="waitForOrderNumberToBeGrabbed"/>
        <grabTextFrom selector="{{CheckoutSuccessMainSection.orderLink}}" stepKey="grabOrderNumber"/>
        <!--Go to admin sales page and open the order id-->
        <actionGroup ref="OpenOrderByIdActionGroup" stepKey="openOrder">
            <argument name="orderId" value="{$grabOrderNumber}"/>
        </actionGroup>
        <!-- Check status -->
        <actionGroup ref="AdminOrderViewCheckStatusActionGroup" stepKey="seeAdminOrderStatus">
            <argument name="status" value="Processing"/>
        </actionGroup>
        <!--Open Invoice-->
        <waitForElementClickable selector="{{AdminOrderDetailsOrderViewSection.invoices}}" stepKey="waitForInvoicesTabClickable" />
        <click selector="{{AdminOrderDetailsOrderViewSection.invoices}}" stepKey="openInvoicesTab"/>
        <!--Assert Invoice amount -->
        <waitForElementVisible selector="{{AdminOrderDetailsMainActionsSection.invoiceTabDetails}}" stepKey="waitForInvoiceSectionDetailsToBeAppeared"/>
    </test>
</tests>
