<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->
<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="AdminCaptureInvoiceForPaypalBillingAgreementPaymentAdvancedTest">
        <annotations>
            <features value="PayPal"/>
            <stories value="Partial Capture Order with Payments Advanced"/>
            <title value="Check Partial Capture order placed with Paypal Payments Advanced"/>
            <description value="Place an order with Paypal Payments Advanced as payment method and Partial Capture the Order"/>
            <severity value="MAJOR"/>
            <testCaseId value="AC-4833"/>
            <group value="3rd_party_integration"/>
        </annotations>
        <before>
            <!-- Simple product is created -->
            <createData entity="SimpleProduct" stepKey="createProduct"/>
            <!-- US Customer is created -->
            <createData entity="Simple_US_Customer_CA" stepKey="createCustomer"/>
            <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>
            <!-- Configure PayPal Express Checkout -->
            <actionGroup ref="AdminConfigurationPaymentAdvancedActionGroup" stepKey="ConfigPaymentAdvanced"/>
            <magentoCLI command="config:set payment/payflow_advanced/active 1" stepKey="enablePaymentAdvancedSolution"/>
            <magentoCLI command="config:set payment/payflow_express_bml/active 1" stepKey="enablePaypalCredit"/>
            <magentoCLI command="config:set payment/payflow_express/active 1" stepKey="enablePayPalVault"/>
            <actionGroup ref="CliIndexerReindexActionGroup" stepKey="runIndexCronJob">
                <argument name="indices" value="cataloginventory_stock"/>
            </actionGroup>
            <!-- Login to StoreFront -->
            <actionGroup ref="LoginToStorefrontActionGroup" stepKey="storefrontCustomerLogin">
                <argument name="Customer" value="$$createCustomer$$"/>
            </actionGroup>
            <!-- Open Product Page to add product in the cart -->
            <actionGroup ref="StorefrontOpenProductEntityPageActionGroup" stepKey="amOnProductPage">
                <argument name="product" value="$createProduct$"/>
            </actionGroup>
            <scrollTo selector="{{StorefrontProductActionSection.quantity}}" stepKey="scrollToQuantityField"/>
            <actionGroup ref="AddProductWithQtyToCartFromStorefrontProductPageActionGroup" stepKey="addProductToCart">
                <argument name="productName" value="$$createProduct.name$$"/>
                <argument name="productQty" value="2"/>
            </actionGroup>
            <!-- Go to Checkout Page -->
            <actionGroup ref="StorefrontOpenCheckoutPageActionGroup" stepKey="goToCheckout"/>
            <actionGroup ref="CheckoutSelectFlatRateShippingMethodActionGroup" stepKey="selectFlatRateShipping"/>
            <actionGroup ref="StorefrontCheckoutClickNextOnShippingStepActionGroup" stepKey="clickNext"/>
            <!-- Click on PayPal payment radio button -->
            <waitForElementClickable selector="{{AdminConfigurepaymentsAdvancedSection.payFlowExpress}}" stepKey="waitForPayPalRadioButton"/>
            <click selector="{{AdminConfigurepaymentsAdvancedSection.payFlowExpress}}" stepKey="selectPaypalPayment"/>
            <waitForElementClickable selector="{{AdminConfigurepaymentsAdvancedSection.continueButton}}" stepKey="waitForPayPalBtn"/>
            <click selector="{{AdminConfigurepaymentsAdvancedSection.continueButton}}" stepKey="clickPayPalBtn"/>
            <actionGroup ref="StorefrontLoginToPayPalExpressCheckoutPayFlowEditionActionGroup" stepKey="loginToPayPal"/>
            <actionGroup ref="StorefrontPaypalSwitchBackToMagentoFromCheckoutPageActionGroup" stepKey="confirmPaymentAndGoBackToMagento"/>
            <waitForText selector="{{CheckoutSuccessMainSection.successTitle}}" userInput="Thank you for your purchase!" stepKey="waitForLoadSuccessPage"/>
            <waitForText selector="{{CheckoutSuccessMainSection.success}}" userInput="We'll email you an order confirmation with details and tracking info." stepKey="seeSuccessMessage"/>
        </before>
        <after>
            <deleteData createDataKey="createProduct" stepKey="deleteSimpleProduct"/>
            <deleteData createDataKey="createCustomer" stepKey="deleteCustomer"/>
            <magentoCLI command="config:set payment/payflow_express_bml/active 0" stepKey="disablePaypalCredit"/>
            <magentoCLI command="config:set payment/payflow_advanced/active 0" stepKey="disablePaymentAdvancedSolution"/>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logout"/>
        </after>
        <grabTextFrom selector="{{CheckoutSuccessMainSection.orderNumber22}}" stepKey="orderNumber"/>
        <assertNotEmpty stepKey="assertOrderIdIsNotEmpty">
            <actualResult type="const">$orderNumber</actualResult>
        </assertNotEmpty>
        <!--Go to admin sales page and open the order id-->
        <actionGroup ref="OpenOrderByIdActionGroup" stepKey="openOrder">
            <argument name="orderId" value="{$orderNumber}"/>
        </actionGroup>
        <!--Submit invoice-->
        <actionGroup ref="AdminClickInvoiceButtonOrderViewActionGroup" stepKey="clickInvoiceButton"/>
        <seeOptionIsSelected userInput="Capture Online" selector="{{AdminInvoiceTotalSection.amount}}" stepKey="seeOptionType"/>
        <!--Update qty as 1 and assert the status of the order-->
        <actionGroup ref="AdminFillQtyToInvoiceOnCreateInvoicePageActionGroup" stepKey="fillInvoiceQuantity">
            <argument name="qty" value="1"/>
        </actionGroup>
        <actionGroup ref="AdminClickUpdateQtysButtonOnCreateInvoicePageActionGroup" stepKey="clickUpdateQtyAfterUpdatingInvoiceBtn"/>
        <actionGroup ref="AdminInvoiceClickSubmitActionGroup" stepKey="clickSubmitInvoice"/>
        <actionGroup ref="AdminOrderViewCheckStatusActionGroup" stepKey="checkOrderStatus">
            <argument name="status" value="Processing"/>
        </actionGroup>
        <waitForElementVisible selector="{{AdminOrderDetailsInformationSection.paymentInformationField('Last Transaction ID')}}" stepKey="waitForLastTransactionIDFieldToBeAppearedAfterSubmittingInvoice"/>
        <grabTextFrom selector="{{AdminOrderDetailsInformationSection.paymentInformationField('Last Transaction ID')}}" stepKey="grabLastTransactionIDForCaptured"/>
        <!--Open the comment history tab and assert the comment-->
        <actionGroup ref="AdminOpenOrderCommentsHistoryActionGroup" stepKey="clickOnCommentsHistoryAfterSubmittingInvoice"/>
        <waitForText selector="{{AdminOrderCommentsTabSection.orderCommentsWithType('Captured amount')}}" userInput="Captured amount of $133.00 online. Transaction ID: &quot;{$grabLastTransactionIDForCaptured}&quot;" stepKey="seeOrderHistoryNotesAfterSubmittingInvoice"/>
        <!-- Check the last transaction of the order and validate the details for Captured and Authorization-->
        <actionGroup ref="AdminViewAuthorizationTransactionsInOrderActionGroup" stepKey="validateAuthTransaction"/>
        <waitForText selector="{{AdminTransactionsGridSection.transactionData('Is Closed')}}" userInput="No" stepKey="seeIfClosedHeaderIsSetAsYesForAuthorization"/>
        <waitForElementClickable selector="{{AdminProductFormActionSection.backButton}}" stepKey="waitForBackButtonToBeClicked"/>
        <click selector="{{AdminProductFormActionSection.backButton}}" stepKey="clickBackButton"/>
        <actionGroup ref="AdminAssertTransitionTypeStatusNewActionGroup" stepKey="assertTransactionTypeStatusForCapture">
            <argument name="transactionType" value="capture"/>
            <argument name="transitionTypeStatus" value="No"/>
        </actionGroup>
    </test>
</tests>
